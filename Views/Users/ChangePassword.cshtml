@using System.Security.Claims
@model VDiary.Models.User

@{
    ViewData["Title"] = "Edit";
    var userId = "";
    var userRole = "";
    @if (User.Identity.IsAuthenticated)
    {
        userId = @User.FindFirst(c => c.Type == ClaimTypes.NameIdentifier).Value;
        userRole = @User.FindFirst(c => c.Type == ClaimTypes.Role).Value;
    }
    var error = TempData["Error"] as string;
}

<h1>Edit</h1>

<h4>User</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        @if (!string.IsNullOrEmpty(error))
        {
            <h1 class="alert-danger">@error</h1>
        }
        <form asp-action="ChangePassword">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Password" class="control-label"></label>
                <input asp-for="Password" type="password" class="form-control" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label>Repeat password</label>
                <input name="passwordR" type="password" class="form-control" />

            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>
@if (userRole == "Admin")
{
    <div>
        <a asp-action="Index">Back to List Users</a>
    </div>
}
<div>
    <a asp-action="Details" asp-route-id="@userId">Back</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
